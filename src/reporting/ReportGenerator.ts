// src/reporting/ReportGenerator.ts
import fs from "fs/promises";
import path from "path";
import { TestResult, TestSummary } from "../runners/TestRunner";

export interface ReportOptions {
  results: TestSummary;
  outputPath: string;
  includeScreenshots?: boolean;
  format?: "html" | "json" | "junit" | "all";
}

export class ReportGenerator {
  async generateReport(options: ReportOptions): Promise<void> {
    console.log("üìä Generating test reports...");

    try {
      // Ensure output directory exists
      await fs.mkdir(options.outputPath, { recursive: true });

      const format = options.format || "all";

      if (format === "html" || format === "all") {
        await this.generateHtmlReport(options);
      }

      if (format === "json" || format === "all") {
        await this.generateJsonReport(options);
      }

      if (format === "junit" || format === "all") {
        await this.generateJunitReport(options);
      }

      console.log("‚úÖ Reports generated successfully!");
    } catch (error) {
      console.error("Error generating reports:", error);
      throw error;
    }
  }

  private async generateHtmlReport(options: ReportOptions): Promise<void> {
    const timestamp = new Date().toLocaleString();
    const { results } = options;

    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Report - ${timestamp}</title>
    <style>
        ${this.getCSSStyles()}
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <header>
            <h1>üß™ Automated Test Report</h1>
            <p class="timestamp">Generated on: ${timestamp}</p>
        </header>
        
        ${this.generateSummarySection(results)}
        ${this.generateChartsSection(results)}
        ${this.generateDetailedResults(results)}
        ${this.generateFailureAnalysis(results)}
        
        <footer>
            <p>Generated by AutoQAgent - Automated Testing Framework</p>
        </footer>
    </div>
    
    <script>
        ${this.getJavaScript(results)}
    </script>
</body>
</html>`;

    const reportPath = path.join(options.outputPath, "test-report.html");
    await fs.writeFile(reportPath, htmlContent);
    console.log(`üìÑ HTML report saved to ${reportPath}`);
  }

  private generateSummarySection(results: TestSummary): string {
    const overallPassRate =
      results.overall.total > 0
        ? Math.round((results.overall.passed / results.overall.total) * 100)
        : 0;

    return `
    <section class="summary">
        <h2>üìà Test Summary</h2>
        <div class="summary-grid">
            <div class="summary-card overall">
                <h3>Overall</h3>
                <div class="metric-large">${overallPassRate}%</div>
                <div class="metric-label">Pass Rate</div>
                <div class="stats">
                    <span class="passed">${results.overall.passed} Passed</span>
                    <span class="failed">${results.overall.failed} Failed</span>
                    <span class="skipped">${
                      results.overall.skipped
                    } Skipped</span>
                </div>
                <div class="duration">Duration: ${this.formatDuration(
                  results.overall.duration
                )}</div>
            </div>
            
            <div class="summary-card gui">
                <h3>üñ•Ô∏è GUI Tests</h3>
                <div class="metric">${results.gui.passed}/${
      results.gui.total
    }</div>
                <div class="metric-label">Passed</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${
                      results.gui.total > 0
                        ? (results.gui.passed / results.gui.total) * 100
                        : 0
                    }%"></div>
                </div>
                <div class="duration">Duration: ${this.formatDuration(
                  results.gui.duration
                )}</div>
            </div>
            
            <div class="summary-card api">
                <h3>üåê API Tests</h3>
                <div class="metric">${results.api.passed}/${
      results.api.total
    }</div>
                <div class="metric-label">Passed</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${
                      results.api.total > 0
                        ? (results.api.passed / results.api.total) * 100
                        : 0
                    }%"></div>
                </div>
                <div class="duration">Duration: ${this.formatDuration(
                  results.api.duration
                )}</div>
            </div>
        </div>
    </section>`;
  }

  private generateChartsSection(results: TestSummary): string {
    return `
    <section class="charts">
        <h2>üìä Visual Analysis</h2>
        <div class="charts-grid">
            <div class="chart-container">
                <canvas id="overallChart"></canvas>
                <h3>Overall Test Results</h3>
            </div>
            <div class="chart-container">
                <canvas id="comparisonChart"></canvas>
                <h3>GUI vs API Tests</h3>
            </div>
        </div>
    </section>`;
  }

  private generateDetailedResults(results: TestSummary): string {
    const guiResults = results.results.filter(
      (r) => r.id.startsWith("gui") || r.id.includes("gui")
    );
    const apiResults = results.results.filter(
      (r) => r.id.startsWith("api") || r.id.includes("api")
    );

    return `
    <section class="detailed-results">
        <h2>üìã Detailed Test Results</h2>
        
        <div class="test-tabs">
            <button class="tab-button active" onclick="showTab('all')">All Tests</button>
            <button class="tab-button" onclick="showTab('gui')">GUI Tests</button>
            <button class="tab-button" onclick="showTab('api')">API Tests</button>
            <button class="tab-button" onclick="showTab('failed')">Failed Tests</button>
        </div>
        
        <div id="all-tab" class="tab-content active">
            ${this.generateTestTable(results.results)}
        </div>
        
        <div id="gui-tab" class="tab-content">
            ${this.generateTestTable(guiResults)}
        </div>
        
        <div id="api-tab" class="tab-content">
            ${this.generateTestTable(apiResults)}
        </div>
        
        <div id="failed-tab" class="tab-content">
            ${this.generateTestTable(
              results.results.filter((r) => r.status === "failed")
            )}
        </div>
    </section>`;
  }

  private generateTestTable(testResults: TestResult[]): string {
    if (testResults.length === 0) {
      return '<p class="no-tests">No tests found in this category.</p>';
    }

    const rows = testResults
      .map(
        (result) => `
        <tr class="test-row ${result.status}" onclick="toggleDetails('${
          result.id
        }')">
            <td><span class="status-icon ${result.status}">${this.getStatusIcon(
          result.status
        )}</span></td>
            <td class="test-name">${result.name}</td>
            <td class="status">${result.status}</td>
            <td class="duration">${result.duration}ms</td>
            <td>
                ${
                  result.screenshots && result.screenshots.length > 0
                    ? `<span class="screenshot-count">${result.screenshots.length} üì∏</span>`
                    : ""
                }
            </td>
        </tr>
        <tr id="details-${
          result.id
        }" class="test-details" style="display: none;">
            <td colspan="5">
                <div class="details-content">
                    ${
                      result.error
                        ? `<div class="error"><strong>Error:</strong> ${result.error}</div>`
                        : ""
                    }
                    
                    ${
                      result.logs && result.logs.length > 0
                        ? `
                    <div class="logs">
                        <strong>Execution Log:</strong>
                        <pre>${result.logs.join("\n")}</pre>
                    </div>`
                        : ""
                    }
                    
                    ${
                      result.screenshots && result.screenshots.length > 0
                        ? `
                    <div class="screenshots">
                        <strong>Screenshots:</strong>
                        ${result.screenshots
                          .map(
                            (screenshot) =>
                              `<img src="${screenshot}" alt="Screenshot" class="screenshot-thumb">`
                          )
                          .join("")}
                    </div>`
                        : ""
                    }
                    
                    ${
                      result.details
                        ? `
                    <div class="api-details">
                        <strong>Request/Response Details:</strong>
                        <pre>${JSON.stringify(result.details, null, 2)}</pre>
                    </div>`
                        : ""
                    }
                </div>
            </td>
        </tr>
    `
      )
      .join("");

    return `
    <table class="test-table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Test Name</th>
                <th>Result</th>
                <th>Duration</th>
                <th>Assets</th>
            </tr>
        </thead>
        <tbody>
            ${rows}
        </tbody>
    </table>`;
  }

  private generateFailureAnalysis(results: TestSummary): string {
    const failedTests = results.results.filter((r) => r.status === "failed");

    if (failedTests.length === 0) {
      return '<section class="failure-analysis"><h2>üéâ No failures to analyze!</h2></section>';
    }

    // Group failures by error type
    const errorGroups: { [key: string]: TestResult[] } = {};
    failedTests.forEach((test) => {
      const errorKey = test.error ? test.error.split(":")[0] : "Unknown Error";
      if (!errorGroups[errorKey]) {
        errorGroups[errorKey] = [];
      }
      errorGroups[errorKey].push(test);
    });

    const analysisContent = Object.entries(errorGroups)
      .map(
        ([errorType, tests]) => `
        <div class="error-group">
            <h4>${errorType} (${tests.length} test${
          tests.length > 1 ? "s" : ""
        })</h4>
            <ul>
                ${tests.map((test) => `<li>${test.name}</li>`).join("")}
            </ul>
        </div>
      `
      )
      .join("");

    return `
    <section class="failure-analysis">
        <h2>üîç Failure Analysis</h2>
        <p>Found ${failedTests.length} failed test${
      failedTests.length > 1 ? "s" : ""
    } grouped by error type:</p>
        ${analysisContent}
    </section>`;
  }

  private async generateJsonReport(options: ReportOptions): Promise<void> {
    const timestamp = new Date().toISOString();
    const report = {
      metadata: {
        generatedAt: timestamp,
        framework: "AutoQAgent",
        version: "1.0.0",
      },
      summary: options.results,
      testResults: options.results.results,
    };

    const reportPath = path.join(options.outputPath, "test-report.json");
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìÑ JSON report saved to ${reportPath}`);
  }

  private async generateJunitReport(options: ReportOptions): Promise<void> {
    const { results } = options;
    const timestamp = new Date().toISOString();

    const junitXml = `<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="AutoQAgent Tests" tests="${
      results.overall.total
    }" failures="${results.overall.failed}" time="${
      results.overall.duration / 1000
    }">
    <testsuite name="GUI Tests" tests="${results.gui.total}" failures="${
      results.gui.failed
    }" time="${results.gui.duration / 1000}">
        ${results.results
          .filter((r) => r.id.includes("gui"))
          .map((result) => this.generateJunitTestCase(result))
          .join("")}
    </testsuite>
    <testsuite name="API Tests" tests="${results.api.total}" failures="${
      results.api.failed
    }" time="${results.api.duration / 1000}">
        ${results.results
          .filter((r) => r.id.includes("api"))
          .map((result) => this.generateJunitTestCase(result))
          .join("")}
    </testsuite>
</testsuites>`;

    const reportPath = path.join(options.outputPath, "junit-report.xml");
    await fs.writeFile(reportPath, junitXml);
    console.log(`üìÑ JUnit report saved to ${reportPath}`);
  }

  private generateJunitTestCase(result: TestResult): string {
    const failure =
      result.status === "failed"
        ? `<failure message="${
            result.error || "Test failed"
          }">${result.logs.join("\n")}</failure>`
        : "";

    const skipped = result.status === "skipped" ? "<skipped/>" : "";

    return `
    <testcase name="${result.name}" classname="${result.id}" time="${
      result.duration / 1000
    }">
        ${failure}
        ${skipped}
    </testcase>`;
  }

  private getCSSStyles(): string {
    return `
    * { box-sizing: border-box; margin: 0; padding: 0; }
    
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #333;
        background: #f5f5f5;
    }
    
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: white;
        margin-top: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }
    
    header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #eee;
    }
    
    header h1 {
        color: #2c3e50;
        margin-bottom: 10px;
    }
    
    .timestamp {
        color: #7f8c8d;
        font-style: italic;
    }
    
    .summary-grid {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        gap: 20px;
        margin: 20px 0;
    }
    
    .summary-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .summary-card.overall {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    .summary-card.gui {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
    }
    
    .summary-card.api {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
    }
    
    .metric-large {
        font-size: 48px;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .metric {
        font-size: 32px;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .metric-label {
        font-size: 14px;
        opacity: 0.9;
        margin-bottom: 10px;
    }
    
    .stats {
        display: flex;
        justify-content: space-around;
        margin: 10px 0;
        font-size: 12px;
    }
    
    .progress-bar {
        height: 6px;
        background: rgba(255,255,255,0.3);
        border-radius: 3px;
        overflow: hidden;
        margin: 10px 0;
    }
    
    .progress-fill {
        height: 100%;
        background: rgba(255,255,255,0.8);
        transition: width 0.3s ease;
    }
    
    .charts-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin: 20px 0;
    }
    
    .chart-container {
        text-align: center;
        padding: 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .test-tabs {
        display: flex;
        margin: 20px 0;
        border-bottom: 2px solid #eee;
    }
    
    .tab-button {
        padding: 10px 20px;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        font-size: 14px;
        font-weight: 500;
        color: #666;
        transition: all 0.3s ease;
    }
    
    .tab-button:hover {
        color: #333;
        background: #f8f9fa;
    }
    
    .tab-button.active {
        color: #007bff;
        border-bottom-color: #007bff;
    }
    
    .tab-content {
        display: none;
    }
    
    .tab-content.active {
        display: block;
    }
    
    .test-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .test-table th,
    .test-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #eee;
    }
    
    .test-table th {
        background: #f8f9fa;
        font-weight: 600;
        color: #333;
    }
    
    .test-row {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    
    .test-row:hover {
        background-color: #f8f9fa;
    }
    
    .test-row.passed {
        border-left: 4px solid #28a745;
    }
    
    .test-row.failed {
        border-left: 4px solid #dc3545;
    }
    
    .test-row.skipped {
        border-left: 4px solid #ffc107;
    }
    
    .status-icon {
        font-size: 18px;
        margin-right: 8px;
    }
    
    .status-icon.passed { color: #28a745; }
    .status-icon.failed { color: #dc3545; }
    .status-icon.skipped { color: #ffc107; }
    
    .test-name {
        font-weight: 500;
        color: #333;
    }
    
    .status {
        font-weight: 500;
        text-transform: capitalize;
    }
    
    .duration {
        color: #666;
        font-family: monospace;
    }
    
    .screenshot-count {
        background: #e9ecef;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        color: #495057;
    }
    
    .test-details td {
        background: #f8f9fa;
        border-left: 4px solid #dee2e6;
    }
    
    .details-content {
        padding: 20px;
    }
    
    .error {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
        border: 1px solid #f5c6cb;
    }
    
    .logs {
        margin-bottom: 15px;
    }
    
    .logs pre {
        background: #f1f3f4;
        padding: 15px;
        border-radius: 5px;
        font-size: 12px;
        overflow-x: auto;
        max-height: 200px;
        overflow-y: auto;
    }
    
    .screenshots {
        margin-bottom: 15px;
    }
    
    .screenshot-thumb {
        max-width: 200px;
        max-height: 150px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.2s ease;
    }
    
    .screenshot-thumb:hover {
        transform: scale(1.05);
    }
    
    .api-details pre {
        background: #f1f3f4;
        padding: 15px;
        border-radius: 5px;
        font-size: 11px;
        overflow-x: auto;
        max-height: 300px;
        overflow-y: auto;
    }
    
    .no-tests {
        text-align: center;
        color: #666;
        font-style: italic;
        padding: 40px;
    }
    
    .failure-analysis {
        margin: 30px 0;
        padding: 20px;
        background: #fff3cd;
        border-radius: 10px;
        border: 1px solid #ffeaa7;
    }
    
    .error-group {
        margin-bottom: 20px;
        padding: 15px;
        background: white;
        border-radius: 5px;
        border-left: 4px solid #dc3545;
    }
    
    .error-group h4 {
        color: #dc3545;
        margin-bottom: 10px;
    }
    
    .error-group ul {
        list-style-type: none;
        padding-left: 0;
    }
    
    .error-group li {
        padding: 5px 0;
        color: #666;
    }
    
    footer {
        text-align: center;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #eee;
        color: #666;
        font-size: 14px;
    }
    
    @media (max-width: 768px) {
        .summary-grid {
            grid-template-columns: 1fr;
        }
        
        .charts-grid {
            grid-template-columns: 1fr;
        }
        
        .test-table {
            font-size: 14px;
        }
        
        .test-table th,
        .test-table td {
            padding: 8px 10px;
        }
    }`;
  }

  private getJavaScript(results: TestSummary): string {
    return `
    // Chart.js configurations
    const overallCtx = document.getElementById('overallChart').getContext('2d');
    new Chart(overallCtx, {
        type: 'doughnut',
        data: {
            labels: ['Passed', 'Failed', 'Skipped'],
            datasets: [{
                data: [${results.overall.passed}, ${results.overall.failed}, ${results.overall.skipped}],
                backgroundColor: ['#28a745', '#dc3545', '#ffc107'],
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
    
    const comparisonCtx = document.getElementById('comparisonChart').getContext('2d');
    new Chart(comparisonCtx, {
        type: 'bar',
        data: {
            labels: ['GUI Tests', 'API Tests'],
            datasets: [
                {
                    label: 'Passed',
                    data: [${results.gui.passed}, ${results.api.passed}],
                    backgroundColor: '#28a745'
                },
                {
                    label: 'Failed',
                    data: [${results.gui.failed}, ${results.api.failed}],
                    backgroundColor: '#dc3545'
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    // Tab functionality
    function showTab(tabName) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Remove active class from all buttons
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // Show selected tab
        document.getElementById(tabName + '-tab').classList.add('active');
        event.target.classList.add('active');
    }
    
    // Toggle test details
    function toggleDetails(testId) {
        const detailsRow = document.getElementById('details-' + testId);
        if (detailsRow.style.display === 'none') {
            detailsRow.style.display = 'table-row';
        } else {
            detailsRow.style.display = 'none';
        }
    }
    
    // Screenshot modal functionality
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('screenshot-thumb')) {
            const modal = document.createElement('div');
            modal.innerHTML = \`
                <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                     background: rgba(0,0,0,0.8); display: flex; align-items: center; 
                     justify-content: center; z-index: 1000;" onclick="this.remove()">
                    <img src="\${e.target.src}" style="max-width: 90%; max-height: 90%; 
                         border-radius: 10px;">
                </div>
            \`;
            document.body.appendChild(modal);
        }
    });`;
  }

  private getStatusIcon(status: string): string {
    switch (status) {
      case "passed":
        return "‚úÖ";
      case "failed":
        return "‚ùå";
      case "skipped":
        return "‚è≠Ô∏è";
      default:
        return "‚ùì";
    }
  }

  private formatDuration(ms: number): string {
    if (ms < 1000) {
      return `${ms}ms`;
    } else if (ms < 60000) {
      return `${(ms / 1000).toFixed(1)}s`;
    } else {
      const minutes = Math.floor(ms / 60000);
      const seconds = Math.floor((ms % 60000) / 1000);
      return `${minutes}m ${seconds}s`;
    }
  }
}
